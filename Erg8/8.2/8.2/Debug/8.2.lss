
AVRASM ver. 2.1.43  C:\Users\theovaka\Documents\ece\ΡΟΗ Υ\Εργαστήριο Μικροϋπολογιστών\Erg8\8.2\8.2\8.2.asm Wed Dec 20 14:16:58 2017

[builtin](2): Including file 'C:\Program Files (x86)\Atmel\AVR Studio 5.0\avrassembler\include\m16def.inc'
C:\Users\theovaka\Documents\ece\ΡΟΗ Υ\Εργαστήριο Μικροϋπολογιστών\Erg8\8.2\8.2\8.2.asm(1): Including file 'C:\Program Files (x86)\Atmel\AVR Studio 5.0\avrassembler\include\m16def.inc'
                 
                 .include "m16def.inc"
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m16def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega16
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega16
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M16DEF_INC_
                 #define _M16DEF_INC_
                 
                 
                 #pragma partinc 0
                 
                 ; ***** SPECIFY DEVICE ***************************************************
                 .device ATmega16
                 #pragma AVRPART ADMIN PART_NAME ATmega16
                 .equ	SIGNATURE_000	= 0x1e
                 .equ	SIGNATURE_001	= 0x94
                 .equ	SIGNATURE_002	= 0x03
                 
                 #pragma AVRPART CORE CORE_VERSION V2E
                 
                 
                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                 ; NOTE:
                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                 ; and cannot be used with IN/OUT instructions
                 .equ	SREG	= 0x3f
                 .equ	SPL	= 0x3d
                 .equ	SPH	= 0x3e
                 .equ	OCR0	= 0x3c
                 .equ	GICR	= 0x3b
                 .equ	GIFR	= 0x3a
                 .equ	TIMSK	= 0x39
                 .equ	TIFR	= 0x38
                 .equ	SPMCSR	= 0x37
                 .equ	TWCR	= 0x36
                 .equ	MCUCR	= 0x35
                 .equ	MCUCSR	= 0x34
                 .equ	TCCR0	= 0x33
                 .equ	TCNT0	= 0x32
                 .equ	OSCCAL	= 0x31
                 .equ	OCDR	= 0x31
                 .equ	SFIOR	= 0x30
                 .equ	TCCR1A	= 0x2f
                 .equ	TCCR1B	= 0x2e
                 .equ	TCNT1L	= 0x2c
                 .equ	TCNT1H	= 0x2d
                 .equ	OCR1AL	= 0x2a
                 .equ	OCR1AH	= 0x2b
                 .equ	OCR1BL	= 0x28
                 .equ	OCR1BH	= 0x29
                 .equ	ICR1L	= 0x26
                 .equ	ICR1H	= 0x27
                 .equ	TCCR2	= 0x25
                 .equ	TCNT2	= 0x24
                 .equ	OCR2	= 0x23
                 .equ	ASSR	= 0x22
                 .equ	WDTCR	= 0x21
                 .equ	UBRRH	= 0x20
                 .equ	UCSRC	= 0x20
                 .equ	EEARL	= 0x1e
                 .equ	EEARH	= 0x1f
                 .equ	EEDR	= 0x1d
                 .equ	EECR	= 0x1c
                 .equ	PORTA	= 0x1b
                 .equ	DDRA	= 0x1a
                 .equ	PINA	= 0x19
                 .equ	PORTB	= 0x18
                 .equ	DDRB	= 0x17
                 .equ	PINB	= 0x16
                 .equ	PORTC	= 0x15
                 .equ	DDRC	= 0x14
                 .equ	PINC	= 0x13
                 .equ	PORTD	= 0x12
                 .equ	DDRD	= 0x11
                 .equ	PIND	= 0x10
                 .equ	SPDR	= 0x0f
                 .equ	SPSR	= 0x0e
                 .equ	SPCR	= 0x0d
                 .equ	UDR	= 0x0c
                 .equ	UCSRA	= 0x0b
                 .equ	UCSRB	= 0x0a
                 .equ	UBRRL	= 0x09
                 .equ	ACSR	= 0x08
                 .equ	ADMUX	= 0x07
                 .equ	ADCSRA	= 0x06
                 .equ	ADCH	= 0x05
                 .equ	ADCL	= 0x04
                 .equ	TWDR	= 0x03
                 .equ	TWAR	= 0x02
                 .equ	TWSR	= 0x01
                 .equ	TWBR	= 0x00
                 
                 
                 ; ***** BIT DEFINITIONS **************************************************
                 
                 ; ***** TIMER_COUNTER_0 **************
                 ; TCCR0 - Timer/Counter Control Register
                 .equ	CS00	= 0	; Clock Select 1
                 .equ	CS01	= 1	; Clock Select 1
                 .equ	CS02	= 2	; Clock Select 2
                 .equ	WGM01	= 3	; Waveform Generation Mode 1
                 .equ	CTC0	= WGM01	; For compatibility
                 .equ	COM00	= 4	; Compare match Output Mode 0
                 .equ	COM01	= 5	; Compare Match Output Mode 1
                 .equ	WGM00	= 6	; Waveform Generation Mode 0
                 .equ	PWM0	= WGM00	; For compatibility
                 .equ	FOC0	= 7	; Force Output Compare
                 
                 ; TCNT0 - Timer/Counter Register
                 .equ	TCNT0_0	= 0	; 
                 .equ	TCNT0_1	= 1	; 
                 .equ	TCNT0_2	= 2	; 
                 .equ	TCNT0_3	= 3	; 
                 .equ	TCNT0_4	= 4	; 
                 .equ	TCNT0_5	= 5	; 
                 .equ	TCNT0_6	= 6	; 
                 .equ	TCNT0_7	= 7	; 
                 
                 ; OCR0 - Output Compare Register
                 .equ	OCR0_0	= 0	; 
                 .equ	OCR0_1	= 1	; 
                 .equ	OCR0_2	= 2	; 
                 .equ	OCR0_3	= 3	; 
                 .equ	OCR0_4	= 4	; 
                 .equ	OCR0_5	= 5	; 
                 .equ	OCR0_6	= 6	; 
                 .equ	OCR0_7	= 7	; 
                 
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                 .equ	OCIE0	= 1	; Timer/Counter0 Output Compare Match Interrupt register
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                 .equ	OCF0	= 1	; Output Compare Flag 0
                 
                 ; SFIOR - Special Function IO Register
                 .equ	PSR10	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                 
                 
                 ; ***** TIMER_COUNTER_1 **************
                 ; TIMSK - Timer/Counter Interrupt Mask Register
                 .equ	TOIE1	= 2	; Timer/Counter1 Overflow Interrupt Enable
                 .equ	OCIE1B	= 3	; Timer/Counter1 Output CompareB Match Interrupt Enable
                 .equ	OCIE1A	= 4	; Timer/Counter1 Output CompareA Match Interrupt Enable
                 .equ	TICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag register
                 .equ	TOV1	= 2	; Timer/Counter1 Overflow Flag
                 .equ	OCF1B	= 3	; Output Compare Flag 1B
                 .equ	OCF1A	= 4	; Output Compare Flag 1A
                 .equ	ICF1	= 5	; Input Capture Flag 1
                 
                 ; TCCR1A - Timer/Counter1 Control Register A
                 .equ	WGM10	= 0	; Waveform Generation Mode
                 .equ	PWM10	= WGM10	; For compatibility
                 .equ	WGM11	= 1	; Waveform Generation Mode
                 .equ	PWM11	= WGM11	; For compatibility
                 .equ	FOC1B	= 2	; Force Output Compare 1B
                 .equ	FOC1A	= 3	; Force Output Compare 1A
                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                 .equ	COM1A0	= 6	; Compare Ouput Mode 1A, bit 0
                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                 
                 ; TCCR1B - Timer/Counter1 Control Register B
                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                 .equ	WGM12	= 3	; Waveform Generation Mode
                 .equ	CTC10	= WGM12	; For compatibility
                 .equ	CTC1	= WGM12	; For compatibility
                 .equ	WGM13	= 4	; Waveform Generation Mode
                 .equ	CTC11	= WGM13	; For compatibility
                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                 
                 
                 ; ***** EXTERNAL_INTERRUPT ***********
                 ; GICR - General Interrupt Control Register
                 .equ	GIMSK	= GICR	; For compatibility
                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                 .equ	IVSEL	= 1	; Interrupt Vector Select
                 .equ	INT2	= 5	; External Interrupt Request 2 Enable
                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                 .equ	INT1	= 7	; External Interrupt Request 1 Enable
                 
                 ; GIFR - General Interrupt Flag Register
                 .equ	INTF2	= 5	; External Interrupt Flag 2
                 .equ	INTF0	= 6	; External Interrupt Flag 0
                 .equ	INTF1	= 7	; External Interrupt Flag 1
                 
                 ; MCUCR - General Interrupt Control Register
                 .equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 .equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 .equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 .equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	ISC2	= 6	; Interrupt Sense Control 2
                 
                 
                 ; ***** EEPROM ***********************
                 ; EEDR - EEPROM Data Register
                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                 
                 ; EECR - EEPROM Control Register
                 .equ	EERE	= 0	; EEPROM Read Enable
                 .equ	EEWE	= 1	; EEPROM Write Enable
                 .equ	EEMWE	= 2	; EEPROM Master Write Enable
                 .equ	EEWEE	= EEMWE	; For compatibility
                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                 
                 
                 ; ***** CPU **************************
                 ; SREG - Status Register
                 .equ	SREG_C	= 0	; Carry Flag
                 .equ	SREG_Z	= 1	; Zero Flag
                 .equ	SREG_N	= 2	; Negative Flag
                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                 .equ	SREG_S	= 4	; Sign Bit
                 .equ	SREG_H	= 5	; Half Carry Flag
                 .equ	SREG_T	= 6	; Bit Copy Storage
                 .equ	SREG_I	= 7	; Global Interrupt Enable
                 
                 ; MCUCR - MCU Control Register
                 ;.equ	ISC00	= 0	; Interrupt Sense Control 0 Bit 0
                 ;.equ	ISC01	= 1	; Interrupt Sense Control 0 Bit 1
                 ;.equ	ISC10	= 2	; Interrupt Sense Control 1 Bit 0
                 ;.equ	ISC11	= 3	; Interrupt Sense Control 1 Bit 1
                 .equ	SM0	= 4	; Sleep Mode Select
                 .equ	SM1	= 5	; Sleep Mode Select
                 .equ	SE	= 6	; Sleep Enable
                 .equ	SM2	= 7	; Sleep Mode Select
                 
                 ; MCUCSR - MCU Control And Status Register
                 .equ	MCUSR	= MCUCSR	; For compatibility
                 .equ	PORF	= 0	; Power-on reset flag
                 .equ	EXTRF	= 1	; External Reset Flag
                 .equ	EXTREF	= EXTRF	; For compatibility
                 .equ	BORF	= 2	; Brown-out Reset Flag
                 .equ	WDRF	= 3	; Watchdog Reset Flag
                 .equ	JTRF	= 4	; JTAG Reset Flag
                 .equ	JTD	= 7	; JTAG Interface Disable
                 
                 ; OSCCAL - Oscillator Calibration Value
                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                 
                 ; SFIOR - Special function I/O register
                 ;.equ	PSR10	= 0	; Prescaler reset
                 .equ	PSR2	= 1	; Prescaler reset
                 .equ	PUD	= 2	; Pull-up Disable
                 
                 
                 ; ***** TIMER_COUNTER_2 **************
                 ; TIMSK - Timer/Counter Interrupt Mask register
                 .equ	TOIE2	= 6	; Timer/Counter2 Overflow Interrupt Enable
                 .equ	OCIE2	= 7	; Timer/Counter2 Output Compare Match Interrupt Enable
                 
                 ; TIFR - Timer/Counter Interrupt Flag Register
                 .equ	TOV2	= 6	; Timer/Counter2 Overflow Flag
                 .equ	OCF2	= 7	; Output Compare Flag 2
                 
                 ; TCCR2 - Timer/Counter2 Control Register
                 .equ	CS20	= 0	; Clock Select bit 0
                 .equ	CS21	= 1	; Clock Select bit 1
                 .equ	CS22	= 2	; Clock Select bit 2
                 .equ	WGM21	= 3	; Waveform Generation Mode
                 .equ	CTC2	= WGM21	; For compatibility
                 .equ	COM20	= 4	; Compare Output Mode bit 0
                 .equ	COM21	= 5	; Compare Output Mode bit 1
                 .equ	WGM20	= 6	; Waveform Genration Mode
                 .equ	PWM2	= WGM20	; For compatibility
                 .equ	FOC2	= 7	; Force Output Compare
                 
                 ; TCNT2 - Timer/Counter2
                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                 
                 ; OCR2 - Timer/Counter2 Output Compare Register
                 .equ	OCR2_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                 .equ	OCR2_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                 .equ	OCR2_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                 .equ	OCR2_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                 .equ	OCR2_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                 .equ	OCR2_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                 .equ	OCR2_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                 .equ	OCR2_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                 
                 ; ASSR - Asynchronous Status Register
                 .equ	TCR2UB	= 0	; Timer/counter Control Register2 Update Busy
                 .equ	OCR2UB	= 1	; Output Compare Register2 Update Busy
                 .equ	TCN2UB	= 2	; Timer/Counter2 Update Busy
                 .equ	AS2	= 3	; Asynchronous Timer/counter2
                 
                 ; SFIOR - Special Function IO Register
                 ;.equ	PSR2	= 1	; Prescaler Reset Timer/Counter2
                 
                 
                 ; ***** SPI **************************
                 ; SPDR - SPI Data Register
                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                 
                 ; SPSR - SPI Status Register
                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                 .equ	WCOL	= 6	; Write Collision Flag
                 .equ	SPIF	= 7	; SPI Interrupt Flag
                 
                 ; SPCR - SPI Control Register
                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                 .equ	CPHA	= 2	; Clock Phase
                 .equ	CPOL	= 3	; Clock polarity
                 .equ	MSTR	= 4	; Master/Slave Select
                 .equ	DORD	= 5	; Data Order
                 .equ	SPE	= 6	; SPI Enable
                 .equ	SPIE	= 7	; SPI Interrupt Enable
                 
                 
                 ; ***** USART ************************
                 ; UDR - USART I/O Data Register
                 .equ	UDR0	= 0	; USART I/O Data Register bit 0
                 .equ	UDR1	= 1	; USART I/O Data Register bit 1
                 .equ	UDR2	= 2	; USART I/O Data Register bit 2
                 .equ	UDR3	= 3	; USART I/O Data Register bit 3
                 .equ	UDR4	= 4	; USART I/O Data Register bit 4
                 .equ	UDR5	= 5	; USART I/O Data Register bit 5
                 .equ	UDR6	= 6	; USART I/O Data Register bit 6
                 .equ	UDR7	= 7	; USART I/O Data Register bit 7
                 
                 ; UCSRA - USART Control and Status Register A
                 .equ	USR	= UCSRA	; For compatibility
                 .equ	MPCM	= 0	; Multi-processor Communication Mode
                 .equ	U2X	= 1	; Double the USART transmission speed
                 .equ	UPE	= 2	; Parity Error
                 .equ	PE	= UPE	; For compatibility
                 .equ	DOR	= 3	; Data overRun
                 .equ	FE	= 4	; Framing Error
                 .equ	UDRE	= 5	; USART Data Register Empty
                 .equ	TXC	= 6	; USART Transmitt Complete
                 .equ	RXC	= 7	; USART Receive Complete
                 
                 ; UCSRB - USART Control and Status Register B
                 .equ	UCR	= UCSRB	; For compatibility
                 .equ	TXB8	= 0	; Transmit Data Bit 8
                 .equ	RXB8	= 1	; Receive Data Bit 8
                 .equ	UCSZ2	= 2	; Character Size
                 .equ	CHR9	= UCSZ2	; For compatibility
                 .equ	TXEN	= 3	; Transmitter Enable
                 .equ	RXEN	= 4	; Receiver Enable
                 .equ	UDRIE	= 5	; USART Data register Empty Interrupt Enable
                 .equ	TXCIE	= 6	; TX Complete Interrupt Enable
                 .equ	RXCIE	= 7	; RX Complete Interrupt Enable
                 
                 ; UCSRC - USART Control and Status Register C
                 .equ	UCPOL	= 0	; Clock Polarity
                 .equ	UCSZ0	= 1	; Character Size
                 .equ	UCSZ1	= 2	; Character Size
                 .equ	USBS	= 3	; Stop Bit Select
                 .equ	UPM0	= 4	; Parity Mode Bit 0
                 .equ	UPM1	= 5	; Parity Mode Bit 1
                 .equ	UMSEL	= 6	; USART Mode Select
                 .equ	URSEL	= 7	; Register Select
                 
                 .equ	UBRRHI	= UBRRH	; For compatibility
                 
                 ; ***** TWI **************************
                 ; TWBR - TWI Bit Rate register
                 .equ	I2BR	= TWBR	; For compatibility
                 .equ	TWBR0	= 0	; 
                 .equ	TWBR1	= 1	; 
                 .equ	TWBR2	= 2	; 
                 .equ	TWBR3	= 3	; 
                 .equ	TWBR4	= 4	; 
                 .equ	TWBR5	= 5	; 
                 .equ	TWBR6	= 6	; 
                 .equ	TWBR7	= 7	; 
                 
                 ; TWCR - TWI Control Register
                 .equ	I2CR	= TWCR	; For compatibility
                 .equ	TWIE	= 0	; TWI Interrupt Enable
                 .equ	I2IE	= TWIE	; For compatibility
                 .equ	TWEN	= 2	; TWI Enable Bit
                 .equ	I2EN	= TWEN	; For compatibility
                 .equ	ENI2C	= TWEN	; For compatibility
                 .equ	TWWC	= 3	; TWI Write Collition Flag
                 .equ	I2WC	= TWWC	; For compatibility
                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                 .equ	I2STO	= TWSTO	; For compatibility
                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                 .equ	I2STA	= TWSTA	; For compatibility
                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                 .equ	I2EA	= TWEA	; For compatibility
                 .equ	TWINT	= 7	; TWI Interrupt Flag
                 .equ	I2INT	= TWINT	; For compatibility
                 
                 ; TWSR - TWI Status Register
                 .equ	I2SR	= TWSR	; For compatibility
                 .equ	TWPS0	= 0	; TWI Prescaler
                 .equ	TWS0	= TWPS0	; For compatibility
                 .equ	I2GCE	= TWPS0	; For compatibility
                 .equ	TWPS1	= 1	; TWI Prescaler
                 .equ	TWS1	= TWPS1	; For compatibility
                 .equ	TWS3	= 3	; TWI Status
                 .equ	I2S3	= TWS3	; For compatibility
                 .equ	TWS4	= 4	; TWI Status
                 .equ	I2S4	= TWS4	; For compatibility
                 .equ	TWS5	= 5	; TWI Status
                 .equ	I2S5	= TWS5	; For compatibility
                 .equ	TWS6	= 6	; TWI Status
                 .equ	I2S6	= TWS6	; For compatibility
                 .equ	TWS7	= 7	; TWI Status
                 .equ	I2S7	= TWS7	; For compatibility
                 
                 ; TWDR - TWI Data register
                 .equ	I2DR	= TWDR	; For compatibility
                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                 
                 ; TWAR - TWI (Slave) Address register
                 .equ	I2AR	= TWAR	; For compatibility
                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                 
                 
                 ; ***** ANALOG_COMPARATOR ************
                 ; SFIOR - Special Function IO Register
                 .equ	ACME	= 3	; Analog Comparator Multiplexer Enable
                 
                 ; ACSR - Analog Comparator Control And Status Register
                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                 .equ	ACO	= 5	; Analog Compare Output
                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                 .equ	ACD	= 7	; Analog Comparator Disable
                 
                 
                 ; ***** AD_CONVERTER *****************
                 ; ADMUX - The ADC multiplexer Selection Register
                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                 .equ	ADLAR	= 5	; Left Adjust Result
                 .equ	REFS0	= 6	; Reference Selection Bit 0
                 .equ	REFS1	= 7	; Reference Selection Bit 1
                 
                 ; ADCSRA - The ADC Control and Status register
                 .equ	ADCSR	= ADCSRA	; For compatibility
                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                 .equ	ADIE	= 3	; ADC Interrupt Enable
                 .equ	ADIF	= 4	; ADC Interrupt Flag
                 .equ	ADATE	= 5	; When this bit is written to one,the Timer/Counter2 prescaler will be reset.The bit will be cleared by hardware after the operation is performed.Writing a zero to this bit will have no effect.This bit will always be read as zero if Timer/C                 ounter2 is clocked by the internal CPU clock.If this bit is written when Timer/Counter2 is operating in asynchronous mode,the bit will remain one until the prescaler has been reset.
                 .equ	ADFR	= ADATE	; For compatibility
                 .equ	ADSC	= 6	; ADC Start Conversion
                 .equ	ADEN	= 7	; ADC Enable
                 
                 ; ADCH - ADC Data Register High Byte
                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                 
                 ; ADCL - ADC Data Register Low Byte
                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                 
                 ; SFIOR - Special Function IO Register
                 .equ	ADTS0	= 5	; ADC Auto Trigger Source 0
                 .equ	ADTS1	= 6	; ADC Auto Trigger Source 1
                 .equ	ADTS2	= 7	; ADC Auto Trigger Source 2
                 
                 
                 ; ***** JTAG *************************
                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                 .equ	IDRD	= OCDR7	; For compatibility
                 
                 ; MCUCSR - MCU Control And Status Register
                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                 ;.equ	JTD	= 7	; JTAG Interface Disable
                 
                 
                 ; ***** BOOT_LOAD ********************
                 ; SPMCSR - Store Program Memory Control Register
                 .equ	SPMCR	= SPMCSR	; For compatibility
                 .equ	SPMEN	= 0	; Store Program Memory Enable
                 .equ	PGERS	= 1	; Page Erase
                 .equ	PGWRT	= 2	; Page Write
                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                 .equ	RWWSRE	= 4	; Read While Write section read enable
                 .equ	ASRE	= RWWSRE	; For compatibility
                 .equ	RWWSB	= 6	; Read While Write Section Busy
                 .equ	ASB	= RWWSB	; For compatibility
                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                 
                 
                 ; ***** PORTA ************************
                 ; PORTA - Port A Data Register
                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                 .equ	PA0	= 0	; For compatibility
                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                 .equ	PA1	= 1	; For compatibility
                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                 .equ	PA2	= 2	; For compatibility
                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                 .equ	PA3	= 3	; For compatibility
                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                 .equ	PA4	= 4	; For compatibility
                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                 .equ	PA5	= 5	; For compatibility
                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                 .equ	PA6	= 6	; For compatibility
                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                 .equ	PA7	= 7	; For compatibility
                 
                 ; DDRA - Port A Data Direction Register
                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                 
                 ; PINA - Port A Input Pins
                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                 
                 
                 ; ***** PORTB ************************
                 ; PORTB - Port B Data Register
                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                 .equ	PB0	= 0	; For compatibility
                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                 .equ	PB1	= 1	; For compatibility
                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                 .equ	PB2	= 2	; For compatibility
                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                 .equ	PB3	= 3	; For compatibility
                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                 .equ	PB4	= 4	; For compatibility
                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                 .equ	PB5	= 5	; For compatibility
                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                 .equ	PB6	= 6	; For compatibility
                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                 .equ	PB7	= 7	; For compatibility
                 
                 ; DDRB - Port B Data Direction Register
                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                 
                 ; PINB - Port B Input Pins
                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                 
                 
                 ; ***** PORTC ************************
                 ; PORTC - Port C Data Register
                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                 .equ	PC0	= 0	; For compatibility
                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                 .equ	PC1	= 1	; For compatibility
                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                 .equ	PC2	= 2	; For compatibility
                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                 .equ	PC3	= 3	; For compatibility
                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                 .equ	PC4	= 4	; For compatibility
                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                 .equ	PC5	= 5	; For compatibility
                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                 .equ	PC6	= 6	; For compatibility
                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                 .equ	PC7	= 7	; For compatibility
                 
                 ; DDRC - Port C Data Direction Register
                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                 
                 ; PINC - Port C Input Pins
                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                 
                 
                 ; ***** PORTD ************************
                 ; PORTD - Port D Data Register
                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                 .equ	PD0	= 0	; For compatibility
                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                 .equ	PD1	= 1	; For compatibility
                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                 .equ	PD2	= 2	; For compatibility
                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                 .equ	PD3	= 3	; For compatibility
                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                 .equ	PD4	= 4	; For compatibility
                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                 .equ	PD5	= 5	; For compatibility
                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                 .equ	PD6	= 6	; For compatibility
                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                 .equ	PD7	= 7	; For compatibility
                 
                 ; DDRD - Port D Data Direction Register
                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                 
                 ; PIND - Port D Input Pins
                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                 
                 
                 ; ***** WATCHDOG *********************
                 ; WDTCR - Watchdog Timer Control Register
                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                 .equ	WDE	= 3	; Watch Dog Enable
                 .equ	WDTOE	= 4	; RW
                 .equ	WDDE	= WDTOE	; For compatibility
                 
                 
                 
                 ; ***** LOCKSBITS ********************************************************
                 .equ	LB1	= 0	; Lock bit
                 .equ	LB2	= 1	; Lock bit
                 .equ	BLB01	= 2	; Boot Lock bit
                 .equ	BLB02	= 3	; Boot Lock bit
                 .equ	BLB11	= 4	; Boot lock bit
                 .equ	BLB12	= 5	; Boot lock bit
                 
                 
                 ; ***** FUSES ************************************************************
                 ; LOW fuse bits
                 .equ	CKSEL0	= 0	; Select Clock Source
                 .equ	CKSEL1	= 1	; Select Clock Source
                 .equ	CKSEL2	= 2	; Select Clock Source
                 .equ	CKSEL3	= 3	; Select Clock Source
                 .equ	SUT0	= 4	; Select start-up time
                 .equ	SUT1	= 5	; Select start-up time
                 .equ	BODEN	= 6	; Brown out detector enable
                 .equ	BODLEVEL	= 7	; Brown out detector trigger level
                 
                 ; HIGH fuse bits
                 .equ	BOOTRST	= 0	; Select Reset Vector
                 .equ	BOOTSZ0	= 1	; Select Boot Size
                 .equ	BOOTSZ1	= 2	; Select Boot Size
                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                 .equ	CKOPT	= 4	; Oscillator Options
                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                 .equ	JTAGEN	= 6	; Enable JTAG
                 .equ	OCDEN	= 7	; Enable OCD
                 
                 
                 
                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                 .def	XH	= r27
                 .def	XL	= r26
                 .def	YH	= r29
                 .def	YL	= r28
                 .def	ZH	= r31
                 .def	ZL	= r30
                 
                 
                 
                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                 .equ	IOEND	= 0x003f
                 .equ	SRAM_START	= 0x0060
                 .equ	SRAM_SIZE	= 1024
                 .equ	RAMEND	= 0x045f
                 .equ	XRAMEND	= 0x0000
                 .equ	E2END	= 0x01ff
                 .equ	EEPROMEND	= 0x01ff
                 .equ	EEADRBITS	= 9
                 #pragma AVRPART MEMORY PROG_FLASH 16384
                 #pragma AVRPART MEMORY EEPROM 512
                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 
                 
                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                 .equ	NRWW_START_ADDR	= 0x1c00
                 .equ	NRWW_STOP_ADDR	= 0x1fff
                 .equ	RWW_START_ADDR	= 0x0
                 .equ	RWW_STOP_ADDR	= 0x1bff
                 .equ	PAGESIZE	= 64
                 .equ	FIRSTBOOTSTART	= 0x1f80
                 .equ	SECONDBOOTSTART	= 0x1f00
                 .equ	THIRDBOOTSTART	= 0x1e00
                 .equ	FOURTHBOOTSTART	= 0x1c00
                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                 
                 
                 
                 ; ***** INTERRUPT VECTORS ************************************************
                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                 .equ	OC2addr	= 0x0006	; Timer/Counter2 Compare Match
                 .equ	OVF2addr	= 0x0008	; Timer/Counter2 Overflow
                 .equ	ICP1addr	= 0x000a	; Timer/Counter1 Capture Event
                 .equ	OC1Aaddr	= 0x000c	; Timer/Counter1 Compare Match A
                 .equ	OC1Baddr	= 0x000e	; Timer/Counter1 Compare Match B
                 .equ	OVF1addr	= 0x0010	; Timer/Counter1 Overflow
                 .equ	OVF0addr	= 0x0012	; Timer/Counter0 Overflow
                 .equ	SPIaddr	= 0x0014	; Serial Transfer Complete
                 .equ	URXCaddr	= 0x0016	; USART, Rx Complete
                 .equ	UDREaddr	= 0x0018	; USART Data Register Empty
                 .equ	UTXCaddr	= 0x001a	; USART, Tx Complete
                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                 .equ	ERDYaddr	= 0x001e	; EEPROM Ready
                 .equ	ACIaddr	= 0x0020	; Analog Comparator
                 .equ	TWIaddr	= 0x0022	; 2-wire Serial Interface
                 .equ	INT2addr	= 0x0024	; External Interrupt Request 2
                 .equ	OC0addr	= 0x0026	; Timer/Counter0 Compare Match
                 .equ	SPMRaddr	= 0x0028	; Store Program Memory Ready
                 
                 .equ	INT_VECTORS_SIZE	= 42	; size in words
                 
                 #endif  /* _M16DEF_INC_ */
                 
                 
                 
                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega16.xml ************
                 ;*************************************************************************
                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                 ;* 
                 ;* Number            : AVR000
                 ;* File Name         : "m16def.inc"
                 ;* Title             : Register/Bit Definitions for the ATmega16
                 ;* Date              : 2011-02-09
                 ;* Version           : 2.35
                 ;* Support E-mail    : avr@atmel.com
                 ;* Target MCU        : ATmega16
                 ;* 
                 ;* DESCRIPTION
                 ;* When including this file in the assembly program file, all I/O register 
                 ;* names and I/O register bit names appearing in the data book can be used.
                 ;* In addition, the six registers forming the three data pointers X, Y and 
                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                 ;* SRAM is also defined 
                 ;* 
                 ;* The Register names are represented by their hexadecimal address.
                 ;* 
                 ;* The Register Bit names are represented by their bit number (0-7).
                 ;* 
                 ;* Please observe the difference in using the bit names with instructions
                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                 ;* (skip if bit in register set/cleared). The following example illustrates
                 ;* this:
                 ;* 
                 ;* in    r16,PORTB             ;read PORTB latch
                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                 ;* out   PORTB,r16             ;output to PORTB
                 ;* 
                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                 ;* rjmp  TOV0_is_set           ;jump if set
                 ;* ...                         ;otherwise do something else
                 ;*************************************************************************
                 
                 #ifndef _M16DEF_INC_
                 
                 #endif  /* _M16DEF_INC_ */
                 
                 .def hundreds = r20
                 .def tens = r21
                 .def units = r22
                 .def reg = r16
                 .def myr25 =r17
                 .def myr24 =r18
                 .def temp =r19
                    
                 .org 0x00
000000 c000      rjmp reset
                  
                  .DSEG
000060            _tmp_:.byte 2    
                  
                  .CSEG
                  
                 reset:
000001 e50f          ldi reg, low(RAMEND)
000002 bf0d          out SPL, reg
000003 e004          ldi reg, high(RAMEND)
000004 bf0e          out SPH, reg 
000005 ef8c      	ldi r24 ,0xfc ;11111100, PD7-2 output 
000006 bb81          out DDRD ,r24 
000007 ef80          ldi r24 ,(1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4)  
000008 bb84          out DDRC ,r24   
000009 e6a0          ldi r26,low(_tmp_) ;r26-r27 -> X
00000a e0b0          ldi r27,high(_tmp_) 
00000b 2700          clr reg
00000c 930d          st X+,reg
00000d 930c          st X,reg   
00000e ef0f          ser reg
00000f bb0a          out DDRA, reg	;PortA as output  
000010 bb07          out DDRB,reg
000011 bb08      	out PORTB,reg
000012 d129          rcall lcd_init
                 	   
                 main:      
000013 d086          rcall my_routine
000014 3810      	cpi myr25,0x80
000015 f011          breq no_device 
000016 940c 003d     jmp calc_and_show
                 
                 no_device: 
000018 e08a           ldi r24, 10	;Initialise for 0.01s delay
000019 d160           rcall scan_keypad_rising_edge
00001a d176           rcall keypad_to_hex
00001b 3f8f           cpi r24,0xff ; no key read
00001c f3d9           breq no_device
00001d 2f18           mov myr25,r24
00001e 9488           CLC 
00001f 1f11           rol myr25   
000020 1f11           rol myr25
000021 1f11           rol myr25
000022 1f11           rol myr25                                              
                      
                 read2nd:
000023 e08a           ldi r24, 10	;Initialise for 0.01s delay
000024 d155           rcall scan_keypad_rising_edge
000025 d16b           rcall keypad_to_hex
000026 3f8f           cpi r24, 0xff  ; no key read
000027 f3d9           breq read2nd 
000028 2b18           or myr25,r24    
                      
                 read3rd:
000029 e08a           ldi r24, 10	;Initialise for 0.01s delay
00002a d14f           rcall scan_keypad_rising_edge
00002b d165           rcall keypad_to_hex
00002c 3f8f           cpi r24, 0xff  ; no key read
00002d f3d9           breq read3rd 
00002e 2f28           mov myr24,r24
00002f 9488           CLC 
000030 1f22           rol myr24   
000031 1f22           rol myr24
000032 1f22           rol myr24
000033 1f22           rol myr24   
                     
                 read4th:
000034 e08a           ldi r24, 10	;Initialise for 0.01s delay
000035 d144           rcall scan_keypad_rising_edge
000036 d15a           rcall keypad_to_hex
000037 3f8f           cpi r24, 0xff  ; no key read
000038 f3d9           breq read4th 
000039 2b28           or myr24,r24  
00003a 3f1f           cpi myr25,0xff
00003b f409           brne calc_and_show 
00003c 952a           dec myr24 ;2's->1's complement        
                      
                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                  ;;;Apo edw kai katw douleuei me tis times stoys myr24 kai myr25      
                 calc_and_show:
                 	
                 	 
00003d d0fe      	rcall lcd_init
00003e 3810          cpi myr25,0x80
00003f f429          brne continue
                    
000040 d046          rcall display_no_device		;If no device detected
000041 ee88      	ldi r24, LOW(1000)
000042 e093          ldi r25, HIGH(1000)
000043 d07b          rcall wait_msec      ;Wait for 1s 
000044 cfce          rjmp main
                     
                 continue:
000045 2700          clr reg ;flag=0      
000046 ef3f          ldi temp, 0xff
000047 1713          cp myr25, temp
000048 f019          breq negative
                     
000049 e28b          ldi r24, '+'      ;If temperature is over 0
00004a d0e5          rcall lcd_data
00004b c003          rjmp next
                     
                 negative:             ;If temperature is under 0
00004c e28d          ldi r24, '-'
00004d d0e2          rcall lcd_data  
00004e 9520          com myr24
                    
                 next:  
00004f 2f32          mov temp, myr24
000050 7031          andi temp, 0x01
000051 3030          cpi temp, 0x00
000052 f009          breq hex_to_bcd 
000053 ef0f          ldi reg, 0xff     ;If r24 is odd-> flag = 1
                     
                 hex_to_bcd:
000054 2766          clr units
000055 2755          clr tens
000056 2744          clr hundreds 
                 	;CLC
000057 9526          lsr myr24            ;Divide by 2 to convert to Celsius degrees
                 loop1:  
000058 5624          subi myr24, 0x64
000059 f010          brcs case1
00005a 9543          inc hundreds
00005b cffc          rjmp loop1
                 case1:
00005c e634          ldi temp, 0x64
00005d 0f23          add myr24, temp
                 loop2:
00005e 502a          subi myr24, 0x0A
00005f f010          brcs case2
000060 9553          inc tens
000061 cffc          rjmp loop2
                 case2:            
000062 e03a          ldi temp, 0x0A
000063 0f23          add myr24, temp
000064 2f62          mov units, myr24     
000065 d008          rcall print_temperature  
000066 eb82      	ldi r24,0xb2
000067 d0c8          rcall lcd_data 
000068 e483      	ldi r24, 'C'
000069 d0c6          rcall lcd_data 
00006a ee88      	ldi r24, LOW(1000)
00006b e093          ldi r25, HIGH(1000)
00006c d052          rcall wait_msec      ;Wait for 1s 
00006d cfa5          rjmp main
                 
                 
                 print_temperature:  
00006e 3040          cpi hundreds, 0x00
00006f f021          breq check_tens    
000070 e330          ldi temp, 0x30
000071 0f43          add hundreds, temp
000072 2f84          mov r24, hundreds
000073 d0bc          rcall lcd_data
                     
                 check_tens:
000074 3050          cpi tens, 0x00
000075 f411          brne print_tens
000076 3040          cpi hundreds, 0x00
000077 f021          breq print_units
                 
                 print_tens:
000078 e330      	ldi temp, 0x30
000079 0f53          add tens, temp
00007a 2f85          mov r24, tens
00007b d0b4          rcall lcd_data
                     
                 print_units:
00007c e330      	ldi temp, 0x30
00007d 0f63          add units, temp
00007e 2f86          mov r24, units
00007f d0b0          rcall lcd_data     
                     
000080 3000          cpi reg, 0x00
000081 f021          breq leave
000082 e28e          ldi r24, '.'
000083 d0ac          rcall lcd_data
000084 e385          ldi r24, '5'
000085 d0aa          rcall lcd_data
                     
                 leave:
000086 9508          ret
                     
                 
                 
                 display_no_device:      ;Display "NO Device"
000087 e48e          ldi r24, 'N'
000088 d0a7          rcall lcd_data 
000089 e48f          ldi r24, 'O'
00008a d0a5          rcall lcd_data
00008b e280          ldi r24, ' '
00008c d0a3          rcall lcd_data  
00008d e484          ldi r24, 'D'
00008e d0a1          rcall lcd_data
00008f e685          ldi r24, 'e'
000090 d09f          rcall lcd_data
000091 e786          ldi r24, 'v'
000092 d09d          rcall lcd_data
000093 e689          ldi r24, 'i'
000094 d09b          rcall lcd_data
000095 e683          ldi r24, 'c'
000096 d099          rcall lcd_data
000097 e685          ldi r24, 'e'
000098 d097          rcall lcd_data
000099 9508          ret
                 
                 
                 
                 my_routine: 
00009a d035          rcall one_wire_reset
00009b 3081          cpi r24,0x01
00009c f4b1          brne not_connected 
00009d ec8c          ldi r24,0xcc
00009e d077          rcall one_wire_transmit_byte
00009f e484          ldi r24,0x44
0000a0 d075          rcall one_wire_transmit_byte 
                 not_ready:
0000a1 d042          rcall one_wire_receive_bit
0000a2 ff80          sbrs r24,0
0000a3 cffd          rjmp not_ready
                 wake_up:
0000a4 d02b          rcall one_wire_reset
0000a5 3081          cpi r24,0x01
0000a6 f461          brne not_connected
0000a7 ec8c          ldi r24,0xcc
0000a8 d06d          rcall one_wire_transmit_byte
0000a9 eb8e          ldi r24,0xbe
0000aa d06b          rcall one_wire_transmit_byte  
0000ab d05f          rcall one_wire_receive_byte
0000ac 2f28          mov myr24,r24
0000ad d05d          rcall one_wire_receive_byte
0000ae 2f18      	mov myr25,r24
0000af 3f1f          cpi myr25,0xff
0000b0 f409          brne cont2
0000b1 952a          dec myr24 ;2's->1's complement      
                 		
                 cont2:
                     ;lsr r24 ;thelei k to /2?? ->anagkastika akeraia diairesh omws?!
0000b2 c002          rjmp show_temperature
                 not_connected:
0000b3 e810          ldi myr25,0x80
0000b4 2722          clr myr24
                 show_temperature:
0000b5 938f           push r24
0000b6 939f           push r25     
0000b7 9526           lsr myr24
0000b8 bb2b           out PORTA,myr24
0000b9 ee88           ldi r24, LOW(1000)
0000ba e093           ldi r25, HIGH(1000)
0000bb d003           rcall wait_msec      ;Wait for 1s  
0000bc 919f           pop r25
0000bd 918f           pop r24 
0000be 9508           ret
                 
                 wait_msec:
0000bf 938f           push r24 
0000c0 939f           push r25 
0000c1 ee86           ldi r24 , low(998) 
0000c2 e093           ldi r25 , high(998) 
0000c3 d005           rcall wait_usec 
0000c4 919f           pop r25 
0000c5 918f           pop r24 
0000c6 9701           sbiw r24 , 1 
0000c7 f7b9           brne wait_msec 
0000c8 9508           ret
                 
                 wait_usec:
0000c9 9701           sbiw r24 ,1 
0000ca 0000           nop 
0000cb 0000           nop 
0000cc 0000           nop 
0000cd 0000           nop 
0000ce f7d1           brne wait_usec 
0000cf 9508           ret
                 
                 one_wire_reset:
0000d0 9ad4          sbi DDRA ,PA4 ; PA4 configured for output
0000d1 98dc          cbi PORTA ,PA4 ; 480 ?sec reset pulse
0000d2 ee80          ldi r24 ,low(480)
0000d3 e091          ldi r25 ,high(480)
0000d4 dff4          rcall wait_usec
0000d5 98d4          cbi DDRA ,PA4 ; PA4 configured for input
0000d6 98dc          cbi PORTA ,PA4
0000d7 e684          ldi r24 ,100 ; wait 100 ?sec for devices
0000d8 e090          ldi r25 ,0 ; to transmit the presence pulse
0000d9 dfef          rcall wait_usec
0000da b389          in r24 ,PINA ; sample the line
0000db 938f          push r24
0000dc e78c          ldi r24 ,low(380) ; wait for 380 ?sec
0000dd e091          ldi r25 ,high(380)
0000de dfea          rcall wait_usec
0000df 919f          pop r25 ; return 0 if no device was
0000e0 2788          clr r24 ; detected or 1 else
0000e1 ff94          sbrs r25 ,PA4
0000e2 e081          ldi r24 ,0x01
0000e3 9508          ret     
                     
                 one_wire_receive_bit:
0000e4 9ad4          sbi DDRA ,PA4
0000e5 98dc          cbi PORTA ,PA4 ; generate time slot
0000e6 e082          ldi r24 ,0x02
0000e7 e090          ldi r25 ,0x00
0000e8 dfe0          rcall wait_usec
0000e9 98d4          cbi DDRA ,PA4 ; release the line
0000ea 98dc          cbi PORTA ,PA4
0000eb e08a          ldi r24 ,10 ; wait 10 ?s
0000ec e090          ldi r25 ,0
0000ed dfdb          rcall wait_usec
0000ee 2788          clr r24 ; sample the line
0000ef 99cc          sbic PINA ,PA4
0000f0 e081          ldi r24 ,1
0000f1 938f          push r24
0000f2 e381          ldi r24 ,49 ; delay 49 ?s to meet the standards
0000f3 e090          ldi r25 ,0 ; for a minimum of 60 ?sec time slot
0000f4 dfd4          rcall wait_usec ; and a minimum of 1 ?sec recovery time
0000f5 918f          pop r24
0000f6 9508          ret          
                     
                 one_wire_transmit_bit:
0000f7 938f          push r24 ; save r24
0000f8 9ad4          sbi DDRA ,PA4
0000f9 98dc          cbi PORTA ,PA4 ; generate time slot
0000fa e082          ldi r24 ,0x02
0000fb e090          ldi r25 ,0x00
0000fc dfcc          rcall wait_usec
0000fd 918f          pop r24 ; output bit
0000fe fd80          sbrc r24 ,0
0000ff 9adc          sbi PORTA ,PA4
000100 ff80          sbrs r24 ,0
000101 98dc          cbi PORTA ,PA4
000102 e38a          ldi r24 ,58 ; wait 58 ?sec for the
000103 e090          ldi r25 ,0 ; device to sample the line
000104 dfc4          rcall wait_usec
000105 98d4          cbi DDRA ,PA4 ; recovery time
000106 98dc          cbi PORTA ,PA4
000107 e081          ldi r24 ,0x01
000108 e090          ldi r25 ,0x00
000109 dfbf          rcall wait_usec
00010a 9508          ret
                 
                 one_wire_receive_byte:
00010b e0b8          ldi r27 ,8
00010c 27aa          clr r26
                     loop_:
00010d dfd6          rcall one_wire_receive_bit
00010e 95a6          lsr r26
00010f fd80          sbrc r24 ,0
000110 e880          ldi r24 ,0x80
000111 2ba8          or r26 ,r24
000112 95ba          dec r27
000113 f7c9          brne loop_
000114 2f8a          mov r24 ,r26
000115 9508          ret
                     
                 one_wire_transmit_byte:
000116 2fa8          mov r26 ,r24
000117 e0b8          ldi r27 ,8
                     _one_more_:
000118 2788          clr r24
000119 fda0          sbrc r26 ,0
00011a e081          ldi r24 ,0x01
00011b dfdb          rcall one_wire_transmit_bit
00011c 95a6          lsr r26
00011d 95ba          dec r27
00011e f7c9          brne _one_more_
00011f 9508          ret  
                     
                 write_2_nibbles:
000120 938f          push r24 
000121 b390          in r25 ,PIND 
000122 709f          andi r25 ,0x0f 
000123 7f80          andi r24 ,0xf0 
000124 0f89          add r24 ,r25 
000125 bb82          out PORTD ,r24 
000126 9a93          sbi PORTD ,PD3 
000127 9893          cbi PORTD ,PD3 
000128 918f          pop r24 
000129 9582          swap r24 
00012a 7f80          andi r24 ,0xf0 
00012b 0f89          add r24 ,r25
00012c bb82          out PORTD ,r24
00012d 9a93          sbi PORTD ,PD3 
00012e 9893          cbi PORTD ,PD3
00012f 9508          ret    
                 
                 lcd_data:
000130 9a92          sbi PORTD ,PD2 
000131 dfee          rcall write_2_nibbles 
000132 e28b          ldi r24 ,43 
000133 e090          ldi r25 ,0 
000134 df94          rcall wait_usec
000135 9508          ret  
                 
                 lcd_command:
000136 9892          cbi PORTD ,PD2 
000137 dfe8          rcall write_2_nibbles 
000138 e287          ldi r24 ,39 
000139 e090          ldi r25 ,0 
00013a df8e          rcall wait_usec 
00013b 9508          ret  
                 
                 lcd_init:
00013c e288          ldi r24 ,40 
00013d e090          ldi r25 ,0 
00013e df80          rcall wait_msec 
00013f e380          ldi r24 ,0x30 
000140 bb82          out PORTD ,r24 
000141 9a93          sbi PORTD ,PD3 
000142 9893          cbi PORTD ,PD3 
000143 e287          ldi r24 ,39
000144 e090          ldi r25 ,0 
000145 df83          rcall wait_usec 
000146 e380          ldi r24 ,0x30
000147 bb82          out PORTD ,r24
000148 9a93          sbi PORTD ,PD3
000149 9893          cbi PORTD ,PD3
00014a e287          ldi r24 ,39
00014b e090          ldi r25 ,0
00014c df7c          rcall wait_usec
00014d e280          ldi r24 ,0x20 
00014e bb82          out PORTD ,r24
00014f 9a93          sbi PORTD ,PD3
000150 9893          cbi PORTD ,PD3
000151 e287          ldi r24 ,39
000152 e090          ldi r25 ,0
000153 df75          rcall wait_usec
000154 e288          ldi r24 ,0x28 
000155 dfe0          rcall lcd_command 
000156 e08c          ldi r24 ,0x0c
000157 dfde          rcall lcd_command
000158 e081          ldi r24 ,0x01 
000159 dfdc          rcall lcd_command
00015a ef8a          ldi r24 ,low(1530)
00015b e095          ldi r25 ,high(1530)
00015c df6c          rcall wait_usec
00015d e086          ldi r24 ,0x06 
00015e dfd7          rcall lcd_command 
00015f 9508          ret  
                 
                 scan_row:
000160 e098           ldi r25,0x08
                      back:
000161 0f99           lsl r25
000162 958a           dec r24
000163 f7e9           brne back
000164 bb95           out PORTC, r25
000165 0000           nop
000166 0000           nop
000167 b383           in r24, PINC
000168 708f           andi r24, 0x0f
000169 9508           ret
                  
                  scan_keypad:
00016a e081           ldi r24,0x01
00016b dff4           rcall scan_row
00016c 9582           swap r24
00016d 2fb8           mov r27,r24
00016e e082           ldi r24,0x02
00016f dff0           rcall scan_row
000170 0fb8           add r27,r24
000171 e083           ldi r24,0x03
000172 dfed           rcall scan_row
000173 9582           swap r24
000174 2fa8           mov r26,r24
000175 e084           ldi r24,0x04
000176 dfe9           rcall scan_row
000177 0fa8           add r26,r24
000178 01cd           movw r24,r26
000179 9508           ret
                  
                  scan_keypad_rising_edge:
00017a 2f68           mov r22, r24
00017b dfee           rcall scan_keypad
00017c 938f           push r24
00017d 939f           push r25
00017e 2f86           mov r24, r22
00017f 2799           clr r25
000180 df3e           rcall wait_msec   
000181 dfe8           rcall scan_keypad
000182 917f           pop r23
000183 916f           pop r22
000184 2386           and r24,r22
000185 2397           and r25,r23
000186 e6a0           ldi r26,low(_tmp_) ;r26-r27 -> X
000187 e0b0           ldi r27,high(_tmp_) 
000188 917d           ld r23,X+
000189 916c           ld r22,X
00018a 938c           st X,r24
00018b 939e           st -X,r25
00018c 9570           com r23
00018d 9560           com r22
00018e 2386           and r24,r22
00018f 2397           and r25,r23
000190 9508           ret
                  
                  
                 keypad_to_hex: 
000191 01dc          movw r26 ,r24 
000192 e08e          ldi r24 ,0x0e
000193 fda0          sbrc r26 ,0
000194 9508          ret
000195 e080          ldi r24 ,0x00
000196 fda1          sbrc r26 ,1
000197 9508          ret
000198 e08f          ldi r24 ,0x0f
000199 fda2          sbrc r26 ,2
00019a 9508          ret
00019b e08d          ldi r24 ,0x0d
00019c fda3          sbrc r26 ,3 
00019d 9508          ret 
00019e e087          ldi r24 ,0x07
00019f fda4          sbrc r26 ,4
0001a0 9508          ret
0001a1 e088          ldi r24 ,0x08
0001a2 fda5          sbrc r26 ,5
0001a3 9508          ret
0001a4 e089          ldi r24 ,0x09
0001a5 fda6          sbrc r26 ,6
0001a6 9508          ret
0001a7 e08c          ldi r24 ,0x0c
0001a8 fda7          sbrc r26 ,7
0001a9 9508          ret
0001aa e084          ldi r24 ,0x04 
0001ab fdb0          sbrc r27 ,0 
0001ac 9508          ret
0001ad e085          ldi r24 ,0x05
0001ae fdb1          sbrc r27 ,1
0001af 9508          ret
0001b0 e086          ldi r24 ,0x06
0001b1 fdb2          sbrc r27 ,2
0001b2 9508          ret
0001b3 e08b          ldi r24 ,0x0b
0001b4 fdb3          sbrc r27 ,3
0001b5 9508          ret
0001b6 e081          ldi r24 ,0x01
0001b7 fdb4          sbrc r27 ,4
0001b8 9508          ret
0001b9 e082          ldi r24 ,0x02
0001ba fdb5          sbrc r27 ,5
0001bb 9508          ret
0001bc e083          ldi r24 ,0x03
0001bd fdb6          sbrc r27 ,6
0001be 9508          ret
0001bf e08a          ldi r24 ,0x0a
0001c0 fdb7          sbrc r27 ,7
0001c1 9508          ret
0001c2 ef8f          ldi r24,0xff
0001c3 9508          ret


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  14 r17:  13 r18:  20 r19:  15 r20:   6 r21:   5 r22:  11 r23:   5 
r24: 145 r25:  38 r26:  21 r27:  16 r28:   0 r29:   0 r30:   0 r31:   0 
x  :   6 y  :   0 z  :   0 
Registers used: 13 out of 35 (37.1%)

ATmega16 instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   9 adiw  :   0 and   :   4 
andi  :   5 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   2 break :   0 breq  :  10 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  11 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :  16 cbr   :   0 
clc   :   2 clh   :   0 cli   :   0 cln   :   0 clr   :  11 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   3 cp    :   1 cpc   :   0 
cpi   :  15 cpse  :   0 dec   :   5 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :   2 jmp   :   1 
ld    :   2 ldd   :   0 ldi   : 114 lds   :   0 lpm   :   0 lsl   :   1 
lsr   :   4 mov   :  15 movw  :   2 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   6 or    :   3 ori   :   0 out   :  14 pop   :  10 
push  :  10 rcall :  75 ret   :  34 reti  :   0 rjmp  :   8 rol   :   8 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  10 sbic  :   1 sbis  :   0 
sbiw  :   2 sbr   :   0 sbrc  :  19 sbrs  :   3 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   1 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 sts   :   0 
sub   :   0 subi  :   2 swap  :   3 tst   :   0 wdr   :   0 
Instructions used: 40 out of 113 (35.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000388    904      0    904   16384   5.5%
[.dseg] 0x000060 0x000062      0      2      2    1024   0.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
