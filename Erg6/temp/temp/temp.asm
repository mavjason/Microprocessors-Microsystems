.INCLUDE "m16def.inc"
.DEF count=r16
.DEF leds=r17
.DEF temp=r18

; r24 ms for spinthirismos
; r27 ews r22 xrhsimopoiountai

reset:	ldi r24, low(RAMEND)		; initialize stack pointer
		out SPL, r24
		ldi r24, high(RAMEND)
		out SPH, r24

		ldi temp, (1 << PC7) | (1 << PC6) | (1 << PC5) | (1 << PC4)		; output in 4 MSBs, input in 4 LSBs
		out DDRC, temp				; PORTC for output & input
		ser temp
		out DDRB, temp				; PORTB for output	
		out DDRA, temp/////////////////////////////	
		
		clr leds
		out PORTB, leds 			; nullify output
start:	ldi r24, 10					; save spinthirisma -> 10ms
		rcall scan_keypad_rising_edge
		rcall keypad_to_ascii		; r24 has ASCII code
		
		out PORTA, r24/////////////////////////
		cpi r24, 0x30
		brlo start					; if ASCII<0x30, then not number, check again
		cpi r24, 0x3A
		brsh start					; if ASCII>0x39, then not number, check again

		cpi r24, 0x31
		breq next					; if '1' was pushed wait for next
		rcall on_off				; else on-off
		jmp start

next:	ldi r24, 10
		rcall scan_keypad_rising_edge
		rcall keypad_to_ascii		; r24 has ASCII code
		
		cpi r24, 0x30
		brlo start					; if ASCII<0x30, then not number, check again
		cpi r24, 0x3A
		brsh start					; if ASCII>0x39, then not number, check again

		cpi r24, 0x36
		breq lights_on				; if '6' was pushed, then input is '16' so turn lights on for 4 sec

		rcall on_off				; else on-off
		jmp start

lights_on:
		rcall on
		jmp start

		
		
on_off:	ldi count, 8				; on-off routine. makes leds blink
while:	cpi count, 0
		breq stop

		ldi leds, 0xFF
		out PORTB, leds
		ldi r24, low(250)
		ldi r25, high(250)
		rcall wait_msec

		ldi leds, 0x00
		out PORTB, leds
		ldi r24, low(250)
		ldi r25, high(250)
		rcall wait_msec

		dec count
		jmp while		
stop:	ret

on:		ldi leds, 0xFF			; on routine. turns lights on for 4 secs
		out PORTB, leds
		ldi r24, low(4000)
		ldi r25, high(4000)
		rcall wait_msec

		ldi leds, 0x00
		out PORTB, leds
		ret
		
		
; keyboard routines. copied from pdf
scan_row:
		ldi r25, 0x08		; ???????????? ?? '0000 1000'
back_:	lsl r25				; ???????? ???????? ??? '1' ????? ??????
		dec r24				; ???? ????? ? ??????? ??? ???????
		brne back_
		out PORTC, r25		; ? ?????????? ?????? ??????? ??? ?????? '1'
		nop
		nop					; ??????????? ??? ?? ???????? ?? ????? ? ?????? ??????????
		in r24, PINC		; ??????????? ?? ?????? (??????) ??? ????????? ??? ????? ?????????
		andi r24, 0x0f		; ????????????? ?? 4 LSB ???? ?? '1' ???????? ??? ????? ????????? ?? ?????????.
ret

scan_keypad:
		ldi r24, 0x01		; ?????? ??? ????? ?????? ??? ?????????????
		rcall scan_row
		swap r24			; ?????????? ?? ??????????
		mov r27, r24		; ??? 4 msb ??? r27
		ldi r24, 0x02		; ?????? ?? ??????? ?????? ??? ?????????????
		rcall scan_row
		add r27, r24		; ?????????? ?? ?????????? ??? 4 lsb ??? r27
		ldi r24, 0x03		; ?????? ??? ????? ?????? ??? ?????????????
		rcall scan_row
		swap r24			; ?????????? ?? ??????????
		mov r26, r24		; ??? 4 msb ??? r26
		ldi r24, 0x04		; ?????? ??? ??????? ?????? ??? ?????????????
		rcall scan_row
		add r26, r24		; ?????????? ?? ?????????? ??? 4 lsb ??? r26
		movw r24, r26		; ???????? ?? ?????????? ????? ??????????? r25:r24
ret


.DSEG
_tmp_: .byte 2
.CSEG

scan_keypad_rising_edge:
		mov r22, r24		; ?????????? ?? ????? ???????????? ???? r22
		rcall scan_keypad	; ?????? ?? ???????????? ??? ?????????? ?????????
		push r24			; ??? ?????????? ?? ??????????
		push r25
		mov r24, r22		; ??????????? r22 ms (??????? ????? 10-20 msec ??? ??????????? ??? ??? ???????????? ??? ????????????? - ????????????? ????????????)
		ldi r25, 0
		rcall wait_msec
		rcall scan_keypad	; ?????? ?? ???????????? ???? ??? ???????? ??? ??????? ?????????? ???????????
		pop r23
		pop r22
		and r24, r22
		and r25, r23
		ldi r26, low(_tmp_)		; ??????? ??? ????????? ??? ????????? ????
		ldi r27, high(_tmp_)	; ??????????? ????? ??? ???????? ????? r27:r26
		ld r23, X+
		ld r22, X
		st X, r24			; ?????????? ??? RAM ?? ??? ????????? ??? ?????????
		st -X, r25
		com r23
		com r22				; ???? ???? ????????? ??? ????? «?????» ???????
		and r24, r22
		and r25, r23
ret

keypad_to_ascii:
		movw r26, r24
		ldi r24, '*'		; ?????? '1' ???? ?????? ??? ?????????? r26 ???????? ?? ???????? ??????? ??? ????????: C 9 8 7 D # 0 *
		sbrc r26, 0
		ret
		ldi r24, '0'
		sbrc r26, 1
		ret
		ldi r24, '#'
		sbrc r26, 2
		ret
		ldi r24, 'D'
		sbrc r26, 3			; ?? ??? ????? '1' ??????????? ??? ret, ?????? (?? ????? '1')
		ret					; ?????????? ?? ??? ?????????? r24 ??? ASCII ???? ??? D.
		ldi r24, '7'
		sbrc r26, 4
		ret
		ldi r24, '8'
		sbrc r26, 5
		ret
		ldi r24, '9'
		sbrc r26, 6
		ret
		ldi r24, 'C'
		sbrc r26, 7
		ret
		ldi r24, '4'		; ?????? '1' ???? ?????? ??? ?????????? r27 ???????? ?? ???????? ??????? ??? ????????: ? 3 2 1 ? 6 5 4
		sbrc r27, 0
		ret
		ldi r24, '5'
		sbrc r27, 1
		ret
		ldi r24, '6'
		sbrc r27, 2
		ret
		ldi r24, 'B'
		sbrc r27, 3
		ret
		ldi r24, '1'
		sbrc r27, 4
		ret
		ldi r24, '2'
		sbrc r27, 5
		ret
		ldi r24, '3'
		sbrc r27, 6
		ret
		ldi r24, 'A'
		sbrc r27, 7
		ret
		clr r24
		ret

; delay routines. copied from pdf	
wait_msec:
		push r24
		push r25
		ldi r24, low(998)
		ldi r25, high(998)
		rcall wait_usec
		pop r25
		pop r24
		sbiw r24, 1
		brne wait_msec
ret

wait_usec:
		sbiw r24, 1
		nop
		nop
		nop
		nop
		brne wait_usec
ret



